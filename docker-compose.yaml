
services:
  next-app:
    container_name: myprofessionalwebsite
    build:
      context: .
      dockerfile: ./Dockerfile

    # Set environment variables directly in the docker-compose file
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - AUTH_SECRET=${AUTH_SECRET}
      - AUTH_GITHUB_ID=${AUTH_GITHUB_ID}
      - AUTH_GITHUB_SECRET=${AUTH_GITHUB_SECRET}
      - AUTH_GOOGLE_ID=${AUTH_GOOGLE_ID}
      - AUTH_GOOGLE_SECRET=${AUTH_GOOGLE_SECRET}
      - REDIS_URL=${REDIS_URL}
      - NEXT_PUBLIC_URL=${NEXT_PUBLIC_URL}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - UPLOADTHING_TOKEN=${UPLOADTHING_TOKEN}
      - UPLOADTHING_SECRET=${UPLOADTHING_SECRET}
      - REDIS_URL=${REDIS_URL}
    # Set environment variables based on the .env file
    env_file:
      - .env
    volumes:
      - ./next-app/src:/app/src
      # - ./next-app/public:/app/public
    restart: always
    ports:
      - 3000:3000
    networks:
      - my_network
    depends_on:
      - nginx  # Ensuring nginx service starts before next-app
      - redis  # Ensuring redis service starts before next-app

  nginx:
    image: nginx:latest
    container_name: my_nginx
    ports:
      - "93:80"  # Exposing port 80
    volumes:
      - ./nginx-conf:/etc/nginx/conf.d  # Mounting Nginx config file
    networks:
      - my_network

  redis:
    image: redis:latest
    container_name: my_redis
    ports:
      - "6380:6379"  # Exposing port 6379
    networks:
      - my_network
  
  # Add more containers below (nginx, postgres, etc.)

# Define a network, which allows containers to communicate
# with each other, by using their container name as a hostname
networks:
  my_network:
    external: true
    driver: bridge