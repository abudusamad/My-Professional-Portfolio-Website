// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  directUrl = env("DATABASE_URL_UNPOOLED")
}


enum Role {
  USER
  ADMIN
}

enum Profiency {
  BEGINNER
  INTERMEDIATE
  EXPERT
}

model User {
id           String             @id @default(cuid())
name         String?
email        String           @unique
password     String
bio          String
profile_pic  String
role         Role             @default(USER)

projects     Project[]
blogPosts    BlogPost[]
education    Education[]
skills       Skill[]
notifications Notification[]
jobs          Job[]
contacts      Contact[]

}
model TechStack{
  id String @id @default(cuid())
  name String
  projects Project[]

} 

model Project {
  id          String   @id @default(cuid())
  userId      String
  techId      String
  title       String?
  description String?
  link        String
  image_url   String
  isPublished Boolean
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tech TechStack @relation(fields: [techId], references: [id], onDelete: Cascade)

  @@unique([createdAt, updateAt])
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  content     String
  tags        String
  published   Boolean  @default(false)
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author      User     @relation(fields: [authorId], references: [id])

@@unique([content, createdAt])
}

model Education{
  id                String @id @default(cuid())
  userId            String
  institution       String
  qualifications    Json
  startDate         DateTime 
  endDate           DateTime @updatedAt

  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([startDate, endDate])

}

model Skill{
  id String @id @default(cuid())
  userId String
  skill_name Json
  proficency Profiency @default(BEGINNER)

  user User @relation(fields: [userId], references: [id],onDelete: Cascade)
  
}

model Job{
  id String @id @default(cuid())
  userId String
  companyName String
  postion String
  description String
  startDate DateTime
  endDate DateTime? @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification{
  id String @id @default(cuid())
  UserId String
  message String
  isRead Boolean
  createdAt DateTime @default(now())

  user User @relation(fields: [UserId], references: [id], onDelete: Cascade)
}

model Contact{
  id String @id @default(cuid())
  userId String
  phoneNumber Int
  address String
  email String 
  linkedin String
  github String
  twitter String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([email, phoneNumber])
  
}